local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
player.CharacterAdded:Connect(function(newChar)
    character = newChar
end)

-- GUI setup
local gui = Instance.new("ScreenGui")
gui.Name = "AutoFarmGUI"
gui.Parent = player.PlayerGui

local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 200, 0, 50)
mainFrame.Position = UDim2.new(0.5, -100, 0, 10)
mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
mainFrame.BorderSizePixel = 0
mainFrame.Active = true
mainFrame.Draggable = true
mainFrame.Parent = gui

local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0.9, 0, 0.8, 0)
toggleButton.Position = UDim2.new(0.05, 0, 0.1, 0)
toggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.Text = "BẮT ĐẦU AUTO FARM"
toggleButton.Font = Enum.Font.GothamBold
toggleButton.TextSize = 14
toggleButton.Parent = mainFrame

local isRunning = false

-- Hiệu ứng nút
local function animateButton(button)
    local originalSize = button.Size
    local originalPos = button.Position

    local tweenIn = TweenService:Create(button, TweenInfo.new(0.1), {
        Size = originalSize - UDim2.new(0.05, 0, 0.05, 0),
        Position = originalPos + UDim2.new(0.025, 0, 0.025, 0)
    })

    local tweenOut = TweenService:Create(button, TweenInfo.new(0.1), {
        Size = originalSize,
        Position = originalPos
    })

    tweenIn:Play()
    tweenIn.Completed:Wait()
    tweenOut:Play()
end

-- Teleport hỗ trợ cho màn 1
local function teleportToPart(part)
    if part and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local root = player.Character.HumanoidRootPart
        root.CFrame = CFrame.new(part.Position + Vector3.new(0, 5, 0))
        print("✅ Đã dịch chuyển đến:", part:GetFullName())
    else
        warn("❌ Không thể dịch chuyển – thiếu Part hoặc Character.")
    end
end

local function getSecondModelFromLevels()
    local levels = workspace:FindFirstChild("Levels")
    if not levels then return nil end

    local children = levels:GetChildren()
    table.sort(children, function(a, b) return a.Name < b.Name end)

    if #children >= 2 then
        return children[2]
    end
    return nil
end

local function tryGetCollectiblesTarget()
    local secondModel = getSecondModelFromLevels()
    if not secondModel then return nil end

    local map = secondModel:FindFirstChild("Map")
    if not map then return nil end

    local innerLevels = map:FindFirstChild("Levels")
    if not innerLevels then return nil end

    local model1 = innerLevels:FindFirstChild("1")
    if not model1 then return nil end

    local collectibles = model1:FindFirstChild("Collectibles")
    if not collectibles then return nil end

    local finalModel = collectibles:FindFirstChild("Model")
    if finalModel and finalModel:IsA("Model") then
        return finalModel.PrimaryPart or finalModel:FindFirstChildWhichIsA("BasePart")
    end
    return nil
end

local function tryGetCheckpointFallback()
    local secondModel = getSecondModelFromLevels()
    if not secondModel then return nil end

    local map = secondModel:FindFirstChild("Map")
    if not map then return nil end

    local innerLevels = map:FindFirstChild("Levels")
    if not innerLevels then return nil end

    local model1 = innerLevels:FindFirstChild("1")
    if not model1 then return nil end

    local checkpoints = model1:FindFirstChild("Checkpoints")
    if not checkpoints then return nil end

    local part3 = checkpoints:FindFirstChild("3")
    if part3 and part3:IsA("BasePart") then
        return part3
    end
    return nil
end

-- Phát hiện màn
local function detectCurrentLevel(levelsFolder)
    if levelsFolder:FindFirstChild("RainbowRun") then
        return 45
    end
    for i = 44, 1, -1 do
        if levelsFolder:FindFirstChild(tostring(i)) then
            return i
        end
    end
    return 1
end

-- Lấy model level
local function getLevelModel(levelsFolder, levelNum)
    if levelNum <= 44 then
        return levelsFolder:FindFirstChild(tostring(levelNum))
    elseif levelNum == 45 then
        return levelsFolder:FindFirstChild("RainbowRun")
    end
    return nil
end

-- Dịch chuyển tới Collectibles
local function teleportToCollectibles(levelModel, levelNum)
    if not levelModel or not levelModel:IsA("Model") then return false end

    local map = levelModel:FindFirstChild("Map")
    if not map or not map:IsA("Model") then return false end

    local nestedLevels = map:FindFirstChild("Levels")
    if not nestedLevels or not nestedLevels:IsA("Folder") then return false end

    local innerModel = nestedLevels:FindFirstChild("1")
    if not innerModel or not innerModel:IsA("Model") then return false end

    local collectibles = innerModel:FindFirstChild("Collectibles")
    if not collectibles or not collectibles:IsA("Folder") then return false end

    local targetModel = collectibles:FindFirstChild("Model")
    if not targetModel or not targetModel:IsA("Model") then return false end

    if not targetModel.PrimaryPart then
        for _, part in ipairs(targetModel:GetDescendants()) do
            if part:IsA("BasePart") then
                pcall(function() targetModel.PrimaryPart = part end)
                break
            end
        end
    end

    if not targetModel.PrimaryPart then return false end

    while isRunning and targetModel and targetModel.Parent and targetModel.PrimaryPart do
        if character and character.PrimaryPart then
            pcall(function()
                character:PivotTo(targetModel.PrimaryPart.CFrame * CFrame.new(0, 5, 0))
            end)
            toggleButton.Text = "AUTO FARMING... MÀN "..(levelNum == 45 and "RAINBOW" or levelNum)
        end
        task.wait(0.08)
    end
    return true
end

local function fallbackToCheckpoint(levelModel, levelNum)
    if not levelModel or not levelModel:IsA("Model") then return false end

    local map = levelModel:FindFirstChild("Map")
    if not map or not map:IsA("Model") then return false end

    local nestedLevels = map:FindFirstChild("Levels")
    if not nestedLevels or not nestedLevels:IsA("Folder") then return false end

    local innerModel = nestedLevels:FindFirstChild("1")
    if not innerModel or not innerModel:IsA("Model") then return false end

    local checkpoints = innerModel:FindFirstChild("Checkpoints")
    if not checkpoints or not checkpoints:IsA("Folder") then return false end

    local partName = (levelNum == 45) and "3" or (levelNum >= 30 and "2" or "3")
    local part = checkpoints:FindFirstChild(partName)
    if not part or not part:IsA("BasePart") then return false end

    while isRunning and levelModel and levelModel.Parent do
        if character and character.PrimaryPart then
            pcall(function()
                character:PivotTo(part.CFrame * CFrame.new(0, 5, 0))
            end)
            toggleButton.Text = "FALLBACK... MÀN "..(levelNum == 45 and "RAINBOW" or levelNum)
        end
        task.wait(0.08)
    end
    return true
end

local function waitForNextLevel(levelsFolder, currentLevel)
    local nextLevel = currentLevel + 1
    while isRunning do
        if currentLevel == 44 then
            if not levelsFolder:FindFirstChild("44") and levelsFolder:FindFirstChild("RainbowRun") then
                break
            end
        else
            local currentExists = levelsFolder:FindFirstChild(currentLevel == 45 and "RainbowRun" or tostring(currentLevel))
            local nextExists = levelsFolder:FindFirstChild(nextLevel == 45 and "RainbowRun" or tostring(nextLevel))
            if not currentExists and nextExists then
                break
            end
        end
        RunService.Heartbeat:Wait()
    end
end

-- Hàm chính
local function startAutoFarm()
    -- Hỗ trợ xử lý riêng màn 1
    local firstTarget = tryGetCollectiblesTarget()
    if firstTarget then
        teleportToPart(firstTarget)
    else
        local fallback = tryGetCheckpointFallback()
        if fallback then
            teleportToPart(fallback)
        else
            warn("❌ Không thể xử lý màn 1.")
        end
    end
    task.wait(3)

    local levelsFolder = workspace:FindFirstChild("Levels")
    if not levelsFolder then
        warn("Không tìm thấy Levels folder")
        return
    end

    local currentLevel = detectCurrentLevel(levelsFolder)
    local maxLevels = 45

    while isRunning and currentLevel <= maxLevels do
        local levelModel = getLevelModel(levelsFolder, currentLevel)
        if not levelModel then break end

        -- ✅ Dịch chuyển đến Collectibles một lần
        teleportToCollectibles(levelModel, currentLevel)
        
        -- ✅ Sau đó fallback luôn
        fallbackToCheckpoint(levelModel, currentLevel)

        -- Đợi màn tiếp theo (nếu chưa phải cuối)
        if currentLevel < maxLevels then
            waitForNextLevel(levelsFolder, currentLevel)
        end
        currentLevel += 1
    end

    if isRunning then
        toggleButton.Text = "HOÀN THÀNH!"
        task.wait(2)
        toggleButton.Text = "BẮT ĐẦU AUTO FARM"
    end
    isRunning = false
end

-- Nút bấm
toggleButton.MouseButton1Click:Connect(function()
    animateButton(toggleButton)

    if not isRunning then
        isRunning = true
        toggleButton.BackgroundColor3 = Color3.fromRGB(80, 160, 80)
        toggleButton.Text = "ĐANG CHUẨN BỊ..."
        task.spawn(startAutoFarm)
    else
        isRunning = false
        toggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        toggleButton.Text = "BẮT ĐẦU AUTO FARM"
    end
end)

toggleButton.MouseEnter:Connect(function()
    if not isRunning then
        toggleButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    end
end)

toggleButton.MouseLeave:Connect(function()
    if not isRunning then
        toggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    end
end)
